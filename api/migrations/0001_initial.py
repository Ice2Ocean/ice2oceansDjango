# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-04-13 20:56
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Arendtregions',
            fields=[
                ('arendtid', models.IntegerField(primary_key=True, serialize=False)),
                ('paperid', models.IntegerField(blank=True, null=True)),
                ('region', models.CharField(blank=True, max_length=500, null=True)),
                ('albersgeom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'arendtregions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.AuthGroup')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.AuthGroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.AuthUser')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.AuthPermission')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.AuthUser')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Boundaries',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('area', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'boundaries',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Burgessregions',
            fields=[
                ('burgessid', models.IntegerField(primary_key=True, serialize=False)),
                ('region', models.CharField(blank=True, max_length=500, null=True)),
                ('albersgeom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'burgessregions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.SmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DrawWire',
            fields=[
                ('station_name', models.TextField(blank=True, null=True)),
                ('extension', models.FloatField(blank=True, null=True)),
                ('datetime', models.DateTimeField(blank=True, null=True)),
                ('gid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'draw_wire',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ergi',
            fields=[
                ('glimsid', models.CharField(blank=True, max_length=500, null=True)),
                ('max', models.IntegerField(blank=True, null=True)),
                ('min', models.IntegerField(blank=True, null=True)),
                ('area', models.FloatField(blank=True, null=True)),
                ('albersgeom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('gltype', models.CharField(blank=True, max_length=500, null=True)),
                ('ergiid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'ergi',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ergibins',
            fields=[
                ('ergibinsid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('bins', models.DecimalField(blank=True, decimal_places=0, max_digits=10, null=True)),
                ('area', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('albersgeom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('normbins', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
            ],
            options={
                'db_table': 'ergibins',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Glacierwidebal',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=254, null=True)),
                ('balance', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('season', models.CharField(blank=True, max_length=254, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'glacierwidebal',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Icesat',
            fields=[
                ('t_mean', models.IntegerField(blank=True, null=True)),
                ('t_min', models.IntegerField(blank=True, null=True)),
                ('t_max', models.IntegerField(blank=True, null=True)),
                ('h_ell', models.FloatField(blank=True, null=True)),
                ('geoid', models.FloatField(blank=True, null=True)),
                ('h_orto', models.FloatField(blank=True, null=True)),
                ('h_dem', models.FloatField(blank=True, null=True)),
                ('gain', models.FloatField(blank=True, null=True)),
                ('reftracknr', models.IntegerField(blank=True, null=True)),
                ('stripnr', models.FloatField(blank=True, null=True)),
                ('planenr', models.IntegerField(blank=True, null=True)),
                ('eslope', models.FloatField(blank=True, null=True)),
                ('nslope', models.FloatField(blank=True, null=True)),
                ('slope', models.FloatField(blank=True, null=True)),
                ('aspect', models.FloatField(blank=True, null=True)),
                ('dir', models.FloatField(blank=True, null=True)),
                ('rms', models.FloatField(blank=True, null=True)),
                ('dhdt', models.FloatField(blank=True, null=True)),
                ('nrofprofs', models.SmallIntegerField(blank=True, null=True)),
                ('nrofpoints', models.SmallIntegerField(blank=True, null=True)),
                ('region', models.SmallIntegerField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('load_tide', models.FloatField(blank=True, null=True)),
                ('ocean_tide', models.FloatField(blank=True, null=True)),
                ('time_mean', models.DateField(blank=True, null=True)),
                ('time_min', models.DateField(blank=True, null=True)),
                ('time_max', models.DateField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('gid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'icesat',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Lamb',
            fields=[
                ('lambid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=14, null=True)),
                ('date1', models.DateField(blank=True, null=True)),
                ('date2', models.DateField(blank=True, null=True)),
                ('interval', models.SmallIntegerField(blank=True, null=True)),
                ('volmodel', models.FloatField(blank=True, null=True)),
                ('vol25diff', models.FloatField(blank=True, null=True)),
                ('vol75diff', models.FloatField(blank=True, null=True)),
                ('balmodel', models.FloatField(blank=True, null=True)),
                ('bal25diff', models.FloatField(blank=True, null=True)),
                ('bal75diff', models.FloatField(blank=True, null=True)),
                ('e', models.TextField(blank=True, null=True)),
                ('dz', models.TextField(blank=True, null=True)),
                ('dz25', models.TextField(blank=True, null=True)),
                ('dz75', models.TextField(blank=True, null=True)),
                ('aad', models.TextField(blank=True, null=True)),
                ('masschange', models.TextField(blank=True, null=True)),
                ('massbal', models.TextField(blank=True, null=True)),
                ('numdata', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'lamb',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LambEarly',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=254, null=True)),
                ('balance', models.FloatField(blank=True, db_column='Balance', null=True)),
                ('balance_error', models.FloatField(blank=True, db_column='Balance_error', null=True)),
                ('balance_areaavg', models.FloatField(blank=True, db_column='Balance_areaAvg', null=True)),
                ('balance_areaavg_error', models.FloatField(blank=True, db_column='Balance_areaAvg_error', null=True)),
                ('start_date', models.FloatField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=254, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'lamb_early',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Mapdate',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('rgiid', models.CharField(blank=True, max_length=14, null=True)),
                ('glimsid', models.CharField(blank=True, max_length=14, null=True)),
                ('rgiflag', models.CharField(blank=True, max_length=14, null=True)),
                ('bgndate', models.DateField(blank=True, null=True)),
                ('enddate', models.DateField(blank=True, null=True)),
                ('cenlon', models.FloatField(blank=True, null=True)),
                ('cenlat', models.FloatField(blank=True, null=True)),
                ('o1region', models.SmallIntegerField(blank=True, null=True)),
                ('o2region', models.SmallIntegerField(blank=True, null=True)),
                ('area', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('glactype', models.CharField(blank=True, max_length=4, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('park', models.CharField(blank=True, max_length=4, null=True)),
                ('min', models.FloatField(blank=True, null=True)),
                ('avg', models.FloatField(blank=True, null=True)),
                ('max', models.FloatField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'mapdate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MasconFit',
            fields=[
                ('did', models.AutoField(primary_key=True, serialize=False)),
                ('mascon', models.IntegerField(blank=True, null=True)),
                ('area_deg', models.FloatField(blank=True, null=True)),
                ('area_km2', models.FloatField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mascon_fit',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MasconSolution',
            fields=[
                ('sid', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('mascon', models.IntegerField(blank=True, null=True)),
                ('values_filter1d', models.FloatField(blank=True, null=True)),
                ('version', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'mascon_solution',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Modern',
            fields=[
                ('rgiid', models.CharField(blank=True, max_length=14, null=True)),
                ('glimsid', models.CharField(blank=True, max_length=14, null=True)),
                ('rgiflag', models.CharField(blank=True, max_length=14, null=True)),
                ('bgndate', models.DateField(blank=True, null=True)),
                ('enddate', models.DateField(blank=True, null=True)),
                ('cenlon', models.FloatField(blank=True, null=True)),
                ('cenlat', models.FloatField(blank=True, null=True)),
                ('o1region', models.SmallIntegerField(blank=True, null=True)),
                ('o2region', models.SmallIntegerField(blank=True, null=True)),
                ('area', models.FloatField(blank=True, null=True)),
                ('glactype', models.CharField(blank=True, max_length=4, null=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('gid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'modern',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Modernadditional',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=14, null=True)),
                ('perimeter', models.FloatField(blank=True, null=True)),
                ('volume', models.FloatField(blank=True, null=True)),
                ('compactn', models.FloatField(blank=True, null=True)),
                ('slope', models.SmallIntegerField(blank=True, null=True)),
                ('slope_ton', models.SmallIntegerField(blank=True, null=True)),
                ('slope_med', models.SmallIntegerField(blank=True, null=True)),
                ('slope_b50', models.SmallIntegerField(blank=True, null=True)),
                ('slope_a50', models.SmallIntegerField(blank=True, null=True)),
                ('aspect', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_tx', models.CharField(blank=True, max_length=50, null=True)),
                ('aspect_b50', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_a50', models.SmallIntegerField(blank=True, null=True)),
                ('distance', models.FloatField(blank=True, null=True)),
                ('angle', models.SmallIntegerField(blank=True, null=True)),
                ('dist_point', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('debris', models.SmallIntegerField(blank=True, null=True)),
                ('debris_tx', models.CharField(blank=True, max_length=50, null=True)),
                ('elev_mean', models.IntegerField(blank=True, null=True)),
                ('elev_min', models.IntegerField(blank=True, null=True)),
                ('sk', models.FloatField(blank=True, null=True)),
                ('elev_5', models.IntegerField(blank=True, null=True)),
                ('elev_10', models.IntegerField(blank=True, null=True)),
                ('elev_15', models.IntegerField(blank=True, null=True)),
                ('elev_20', models.IntegerField(blank=True, null=True)),
                ('elev_25', models.IntegerField(blank=True, null=True)),
                ('elev_30', models.IntegerField(blank=True, null=True)),
                ('elev_35', models.IntegerField(blank=True, null=True)),
                ('elev_40', models.IntegerField(blank=True, null=True)),
                ('elev_45', models.IntegerField(blank=True, null=True)),
                ('elev_med', models.IntegerField(blank=True, null=True)),
                ('elev_55', models.IntegerField(blank=True, null=True)),
                ('elev_60', models.IntegerField(blank=True, null=True)),
                ('elev_65', models.IntegerField(blank=True, null=True)),
                ('elev_70', models.IntegerField(blank=True, null=True)),
                ('elev_75', models.IntegerField(blank=True, null=True)),
                ('elev_80', models.IntegerField(blank=True, null=True)),
                ('elev_85', models.IntegerField(blank=True, null=True)),
                ('elev_90', models.IntegerField(blank=True, null=True)),
                ('elev_95', models.IntegerField(blank=True, null=True)),
                ('elev_max', models.IntegerField(blank=True, null=True)),
                ('p_wi', models.IntegerField(blank=True, null=True)),
                ('p_su', models.IntegerField(blank=True, null=True)),
                ('t_wi', models.IntegerField(blank=True, null=True)),
                ('t_su', models.IntegerField(blank=True, null=True)),
                ('p_wi_med', models.IntegerField(blank=True, null=True)),
                ('p_su_med', models.IntegerField(blank=True, null=True)),
                ('t_wi_med', models.IntegerField(blank=True, null=True)),
                ('t_su_med', models.IntegerField(blank=True, null=True)),
                ('lenland', models.IntegerField(blank=True, null=True)),
                ('lendiv', models.IntegerField(blank=True, null=True)),
                ('lentdw', models.IntegerField(blank=True, null=True)),
                ('lenlake', models.IntegerField(blank=True, null=True)),
                ('watersh', models.FloatField(blank=True, null=True)),
                ('lenlanddeb', models.IntegerField(blank=True, null=True)),
                ('errorcat', models.SmallIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'modernadditional',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModernAreaLength',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('len_min', models.IntegerField(blank=True, null=True)),
                ('len_5', models.IntegerField(blank=True, null=True)),
                ('len_10', models.IntegerField(blank=True, null=True)),
                ('len_15', models.IntegerField(blank=True, null=True)),
                ('len_20', models.IntegerField(blank=True, null=True)),
                ('len_25', models.IntegerField(blank=True, null=True)),
                ('len_30', models.IntegerField(blank=True, null=True)),
                ('len_35', models.IntegerField(blank=True, null=True)),
                ('len_40', models.IntegerField(blank=True, null=True)),
                ('len_45', models.IntegerField(blank=True, null=True)),
                ('len_med', models.IntegerField(blank=True, null=True)),
                ('len_55', models.IntegerField(blank=True, null=True)),
                ('len_60', models.IntegerField(blank=True, null=True)),
                ('len_65', models.IntegerField(blank=True, null=True)),
                ('len_70', models.IntegerField(blank=True, null=True)),
                ('len_75', models.IntegerField(blank=True, null=True)),
                ('len_80', models.IntegerField(blank=True, null=True)),
                ('len_85', models.IntegerField(blank=True, null=True)),
                ('len_90', models.IntegerField(blank=True, null=True)),
                ('len_95', models.IntegerField(blank=True, null=True)),
                ('len_max', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'modern_area_length',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Modernbinned',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('elevation', models.IntegerField(blank=True, null=True)),
                ('area', models.FloatField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'modernbinned',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Modernbinned10M',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('elevation', models.IntegerField(blank=True, null=True)),
                ('area', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'modernbinned_10m',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Moderncenterlines',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('length', models.FloatField(blank=True, null=True)),
                ('main', models.SmallIntegerField(blank=True, null=True)),
                ('lenorder', models.IntegerField(blank=True, null=True)),
                ('ratio', models.FloatField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'moderncenterlines',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModerncenterlinesAspectsSlopes',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('length', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('main', models.SmallIntegerField(blank=True, null=True)),
                ('lenorder', models.IntegerField(blank=True, null=True)),
                ('slope', models.FloatField(blank=True, null=True)),
                ('slope_tx', models.CharField(blank=True, max_length=50, null=True)),
                ('aspect', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_tx', models.CharField(blank=True, max_length=50, null=True)),
                ('slope_5', models.FloatField(blank=True, null=True)),
                ('slope_15', models.FloatField(blank=True, null=True)),
                ('slope_25', models.FloatField(blank=True, null=True)),
                ('slope_35', models.FloatField(blank=True, null=True)),
                ('slope_45', models.FloatField(blank=True, null=True)),
                ('slope_55', models.FloatField(blank=True, null=True)),
                ('slope_65', models.FloatField(blank=True, null=True)),
                ('slope_75', models.FloatField(blank=True, null=True)),
                ('slope_85', models.FloatField(blank=True, null=True)),
                ('slope_95', models.FloatField(blank=True, null=True)),
                ('aspect_5', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_15', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_25', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_35', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_45', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_55', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_65', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_75', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_85', models.SmallIntegerField(blank=True, null=True)),
                ('aspect_95', models.SmallIntegerField(blank=True, null=True)),
                ('start_elev', models.IntegerField(blank=True, null=True)),
                ('end_elev', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'moderncenterlines_aspects_slopes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModerncenterlinesFlipped',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('length_br', models.FloatField(blank=True, null=True)),
                ('main', models.SmallIntegerField(blank=True, null=True)),
                ('order_le', models.IntegerField(blank=True, null=True)),
                ('branch_tot', models.IntegerField(blank=True, null=True)),
                ('multiple', models.SmallIntegerField(blank=True, null=True)),
                ('startlen', models.IntegerField(blank=True, null=True)),
                ('endlen', models.IntegerField(blank=True, null=True)),
                ('ratio', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
            ],
            options={
                'db_table': 'moderncenterlines_flipped',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModerncenterlinesHypsometry',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=14, null=True)),
                ('elev_mean', models.IntegerField(blank=True, null=True)),
                ('elev_min', models.IntegerField(blank=True, null=True)),
                ('elev_5', models.IntegerField(blank=True, null=True)),
                ('elev_10', models.IntegerField(blank=True, null=True)),
                ('elev_15', models.IntegerField(blank=True, null=True)),
                ('elev_20', models.IntegerField(blank=True, null=True)),
                ('elev_25', models.IntegerField(blank=True, null=True)),
                ('elev_30', models.IntegerField(blank=True, null=True)),
                ('elev_35', models.IntegerField(blank=True, null=True)),
                ('elev_40', models.IntegerField(blank=True, null=True)),
                ('elev_45', models.IntegerField(blank=True, null=True)),
                ('elev_med', models.IntegerField(blank=True, null=True)),
                ('elev_55', models.IntegerField(blank=True, null=True)),
                ('elev_60', models.IntegerField(blank=True, null=True)),
                ('elev_65', models.IntegerField(blank=True, null=True)),
                ('elev_70', models.IntegerField(blank=True, null=True)),
                ('elev_75', models.IntegerField(blank=True, null=True)),
                ('elev_80', models.IntegerField(blank=True, null=True)),
                ('elev_85', models.IntegerField(blank=True, null=True)),
                ('elev_90', models.IntegerField(blank=True, null=True)),
                ('elev_95', models.IntegerField(blank=True, null=True)),
                ('elev_max', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(blank=True, null=True)),
                ('area', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
            ],
            options={
                'db_table': 'moderncenterlines_hypsometry',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModerncenterlinesTopology',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('branch_tot', models.IntegerField(blank=True, null=True)),
                ('len_90', models.IntegerField(blank=True, null=True)),
                ('len_80', models.IntegerField(blank=True, null=True)),
                ('len_70', models.IntegerField(blank=True, null=True)),
                ('len_60', models.IntegerField(blank=True, null=True)),
                ('len_50', models.IntegerField(blank=True, null=True)),
                ('len_40', models.IntegerField(blank=True, null=True)),
                ('len_30', models.IntegerField(blank=True, null=True)),
                ('len_20', models.IntegerField(blank=True, null=True)),
                ('len_10', models.IntegerField(blank=True, null=True)),
                ('len_0', models.IntegerField(blank=True, null=True)),
                ('r_20', models.IntegerField(blank=True, null=True)),
                ('r_30', models.IntegerField(blank=True, null=True)),
                ('r_40', models.IntegerField(blank=True, null=True)),
                ('r_50', models.IntegerField(blank=True, null=True)),
                ('r_60', models.IntegerField(blank=True, null=True)),
                ('r_70', models.IntegerField(blank=True, null=True)),
                ('r_75', models.IntegerField(blank=True, null=True)),
                ('r_80', models.IntegerField(blank=True, null=True)),
                ('r_85', models.IntegerField(blank=True, null=True)),
                ('r_90', models.IntegerField(blank=True, null=True)),
                ('r_95', models.IntegerField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'moderncenterlines_topology',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModernDebris',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('field1', models.IntegerField(blank=True, null=True)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('deblen_5', models.IntegerField(blank=True, null=True)),
                ('deblen_10', models.IntegerField(blank=True, null=True)),
                ('deblen_15', models.IntegerField(blank=True, null=True)),
                ('deblen_20', models.IntegerField(blank=True, null=True)),
                ('deblen_25', models.IntegerField(blank=True, null=True)),
                ('deblen_30', models.IntegerField(blank=True, null=True)),
                ('deblen_35', models.IntegerField(blank=True, null=True)),
                ('deblen_40', models.IntegerField(blank=True, null=True)),
                ('deblen_45', models.IntegerField(blank=True, null=True)),
                ('deblen_50', models.IntegerField(blank=True, null=True)),
                ('deblen_55', models.IntegerField(blank=True, null=True)),
                ('deblen_60', models.IntegerField(blank=True, null=True)),
                ('deblen_65', models.IntegerField(blank=True, null=True)),
                ('deblen_70', models.IntegerField(blank=True, null=True)),
                ('deblen_75', models.IntegerField(blank=True, null=True)),
                ('deblen_80', models.IntegerField(blank=True, null=True)),
                ('deblen_85', models.IntegerField(blank=True, null=True)),
                ('deblen_90', models.IntegerField(blank=True, null=True)),
                ('deblen_95', models.IntegerField(blank=True, null=True)),
                ('deblen_100', models.IntegerField(blank=True, null=True)),
                ('debele_5', models.IntegerField(blank=True, null=True)),
                ('debele_10', models.IntegerField(blank=True, null=True)),
                ('debele_15', models.IntegerField(blank=True, null=True)),
                ('debele_20', models.IntegerField(blank=True, null=True)),
                ('debele_25', models.IntegerField(blank=True, null=True)),
                ('debele_30', models.IntegerField(blank=True, null=True)),
                ('debele_35', models.IntegerField(blank=True, null=True)),
                ('debele_40', models.IntegerField(blank=True, null=True)),
                ('debele_45', models.IntegerField(blank=True, null=True)),
                ('debele_50', models.IntegerField(blank=True, null=True)),
                ('debele_55', models.IntegerField(blank=True, null=True)),
                ('debele_60', models.IntegerField(blank=True, null=True)),
                ('debele_65', models.IntegerField(blank=True, null=True)),
                ('debele_70', models.IntegerField(blank=True, null=True)),
                ('debele_75', models.IntegerField(blank=True, null=True)),
                ('debele_80', models.IntegerField(blank=True, null=True)),
                ('debele_85', models.IntegerField(blank=True, null=True)),
                ('debele_90', models.IntegerField(blank=True, null=True)),
                ('debele_95', models.IntegerField(blank=True, null=True)),
                ('debele_100', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'modern_debris',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModernerrorAnalysis',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('area', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('k', models.SmallIntegerField(blank=True, null=True)),
                ('e1', models.FloatField(blank=True, null=True)),
                ('p', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('error', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('errorcat', models.SmallIntegerField(blank=True, null=True)),
                ('id', models.SmallIntegerField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'modernerror_analysis',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Modernoutlinetype',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(blank=True, max_length=50, null=True)),
                ('shape_leng', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('length', models.IntegerField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'modernoutlinetype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModernSlopes',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('glimsid', models.CharField(blank=True, max_length=254, null=True)),
                ('slope_5', models.SmallIntegerField(blank=True, null=True)),
                ('slope_10', models.SmallIntegerField(blank=True, null=True)),
                ('slope_15', models.SmallIntegerField(blank=True, null=True)),
                ('slope_20', models.SmallIntegerField(blank=True, null=True)),
                ('slope_25', models.SmallIntegerField(blank=True, null=True)),
                ('slope_30', models.SmallIntegerField(blank=True, null=True)),
                ('slope_35', models.SmallIntegerField(blank=True, null=True)),
                ('slope_40', models.SmallIntegerField(blank=True, null=True)),
                ('slope_45', models.SmallIntegerField(blank=True, null=True)),
                ('slope_50', models.SmallIntegerField(blank=True, null=True)),
                ('slope_55', models.SmallIntegerField(blank=True, null=True)),
                ('slope_60', models.SmallIntegerField(blank=True, null=True)),
                ('slope_65', models.SmallIntegerField(blank=True, null=True)),
                ('slope_70', models.SmallIntegerField(blank=True, null=True)),
                ('slope_75', models.SmallIntegerField(blank=True, null=True)),
                ('slope_80', models.SmallIntegerField(blank=True, null=True)),
                ('slope_85', models.SmallIntegerField(blank=True, null=True)),
                ('slope_90', models.SmallIntegerField(blank=True, null=True)),
                ('slope_95', models.SmallIntegerField(blank=True, null=True)),
                ('slope_100', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_5', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_10', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_15', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_20', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_25', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_30', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_35', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_40', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_45', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_50', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_55', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_60', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_65', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_70', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_75', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_80', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_85', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_90', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_95', models.SmallIntegerField(blank=True, null=True)),
                ('eslope_100', models.SmallIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'modern_slopes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PointBalances',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('rid', models.CharField(blank=True, max_length=254, null=True)),
                ('name', models.CharField(blank=True, max_length=254, null=True)),
                ('stake', models.CharField(blank=True, max_length=254, null=True)),
                ('elevation', models.FloatField(blank=True, null=True)),
                ('balance', models.FloatField(blank=True, null=True)),
                ('error', models.FloatField(blank=True, null=True)),
                ('season', models.CharField(blank=True, max_length=254, null=True)),
                ('strata', models.CharField(blank=True, max_length=254, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=254, null=True)),
                ('notes', models.CharField(blank=True, max_length=250, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'point_balances',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Prism',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(blank=True, null=True)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('precipitation', models.FloatField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('lon', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'prism',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Snowdepths',
            fields=[
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('location', models.CharField(blank=True, max_length=500, null=True)),
                ('stakename', models.CharField(blank=True, max_length=500, null=True)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('depth', models.FloatField(blank=True, null=True)),
                ('dens_snow', models.FloatField(blank=True, null=True)),
                ('weq', models.FloatField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=500, null=True)),
                ('comment', models.CharField(blank=True, max_length=500, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('gid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'snowdepths',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Snowradar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('elev', models.FloatField(blank=True, null=True)),
                ('twtt', models.FloatField(blank=True, null=True)),
                ('thickness', models.FloatField(blank=True, null=True)),
                ('swe', models.FloatField(blank=True, null=True)),
                ('trace', models.IntegerField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'snowradar',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SnowradarLines',
            fields=[
                ('collection', models.TextField(blank=True, null=True)),
                ('velocity', models.FloatField(blank=True, null=True)),
                ('density', models.FloatField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('obs_type', models.TextField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('gid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'snowradar_lines',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SnowradarOld',
            fields=[
                ('elev', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('twtt', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('thickness', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('swe', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('trace', models.IntegerField(blank=True, null=True)),
                ('gid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'snowradar_old',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='StreamgaugeData',
            fields=[
                ('pkey', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateField(blank=True, null=True)),
                ('discharge', models.FloatField(blank=True, null=True)),
                ('code', models.CharField(blank=True, max_length=500, null=True)),
                ('gaugeid', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'streamgauge_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Streamgauges',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('gaugeid', models.BigIntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=254, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('slope', models.IntegerField(blank=True, null=True)),
                ('length', models.DecimalField(blank=True, decimal_places=65535, max_digits=65535, null=True)),
                ('elvation', models.IntegerField(blank=True, null=True)),
                ('lake', models.IntegerField(blank=True, null=True)),
                ('forest', models.IntegerField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('drainage_area', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'streamgauges',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SweingestLines',
            fields=[
                ('collection', models.TextField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('gid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sweingest_lines',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SweingestMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection', models.TextField(blank=True, null=True)),
                ('velocity', models.FloatField(blank=True, null=True)),
                ('density', models.FloatField(blank=True, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('obs_type', models.TextField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
            ],
            options={
                'db_table': 'sweingest_metadata',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Velocities',
            fields=[
                ('name', models.TextField(blank=True, null=True)),
                ('site', models.TextField(blank=True, null=True)),
                ('start_date', models.DateTimeField(blank=True, null=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('velocity', models.FloatField(blank=True, null=True)),
                ('bearing', models.FloatField(blank=True, null=True)),
                ('start_elevation', models.FloatField(blank=True, null=True)),
                ('end_elevation', models.FloatField(blank=True, null=True)),
                ('start_horizontal_error', models.FloatField(blank=True, null=True)),
                ('end_horizontal_error', models.FloatField(blank=True, null=True)),
                ('error_notes', models.TextField(blank=True, null=True)),
                ('source', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('gid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'velocities',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WeatherstationData',
            fields=[
                ('pkey', models.AutoField(primary_key=True, serialize=False)),
                ('station_name', models.CharField(max_length=500)),
                ('date', models.DateTimeField(blank=True, null=True)),
                ('air_temperature', models.FloatField(blank=True, null=True)),
                ('air_pressure', models.FloatField(blank=True, null=True)),
                ('relative_humidity', models.FloatField(blank=True, null=True)),
                ('wind_speed', models.FloatField(blank=True, null=True)),
                ('gust_speed', models.FloatField(blank=True, null=True)),
                ('wind_direction', models.FloatField(blank=True, null=True)),
                ('solar_radiation_in', models.FloatField(blank=True, null=True)),
                ('solar_radiation_out', models.FloatField(blank=True, null=True)),
                ('snow_depth', models.FloatField(blank=True, null=True)),
                ('rainfall', models.FloatField(blank=True, null=True)),
                ('battery_voltage', models.FloatField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=500, null=True)),
                ('extension', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'weatherstation_data',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Weatherstations',
            fields=[
                ('gid', models.AutoField(primary_key=True, serialize=False)),
                ('station_name', models.CharField(blank=True, max_length=254, null=True)),
                ('glacier_name', models.CharField(blank=True, max_length=254, null=True)),
                ('station_id', models.CharField(blank=True, max_length=254, null=True)),
                ('elevation', models.IntegerField(blank=True, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('design', models.CharField(blank=True, max_length=254, null=True)),
                ('notes', models.CharField(blank=True, max_length=254, null=True)),
                ('geom', django.contrib.gis.db.models.fields.GeometryField(blank=True, null=True, srid=4326)),
                ('sensor_height', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'weatherstations',
                'managed': True,
            },
        ),
        migrations.AlterUniqueTogether(
            name='djangocontenttype',
            unique_together=set([('app_label', 'model')]),
        ),
        migrations.AddField(
            model_name='djangoadminlog',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='api.DjangoContentType'),
        ),
        migrations.AddField(
            model_name='djangoadminlog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.AuthUser'),
        ),
        migrations.AddField(
            model_name='authpermission',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.DjangoContentType'),
        ),
        migrations.AddField(
            model_name='authgrouppermissions',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='api.AuthPermission'),
        ),
        migrations.AlterUniqueTogether(
            name='authuseruserpermissions',
            unique_together=set([('user', 'permission')]),
        ),
        migrations.AlterUniqueTogether(
            name='authusergroups',
            unique_together=set([('user', 'group')]),
        ),
        migrations.AlterUniqueTogether(
            name='authpermission',
            unique_together=set([('content_type', 'codename')]),
        ),
        migrations.AlterUniqueTogether(
            name='authgrouppermissions',
            unique_together=set([('group', 'permission')]),
        ),
    ]
